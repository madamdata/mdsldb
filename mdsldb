#!/usr/bin/python3

import mysql.connector, click, os, datetime
from rich import print
from rich.table import Table
from rich.console import Console
from rich.style import Style
from rich.color import Color
from mysql.connector import Error
import re
import dbclasses, dbtable
from dbtable import columnStyle
from functions import read_query, execute_query, print_raw_query_to_table
from dotenv import load_dotenv, dotenv_values


# Load environment and initialize airtable interface
# load_dotenv()
load_dotenv()
password = os.environ['SQLPASSWORD']
username = os.environ['SQLUSERNAME']

def create_server_connection(host_name, user_name, db, user_password):
    connection = None
    try:
        connection = mysql.connector.connect(
                host=host_name,
                user=user_name,
                port=3307,
                database=db,
                passwd=user_password
                )
        print("~connected~")
    except Error as err:
        print(f"Error: '{err}'")

    return connection

def mdsldb_connect():
    connection = create_server_connection("localhost", username, "soundlabs_work", password)
    return connection

def rgb(r, g, b):
    color = Color.from_rgb(r, g, b)
    return color


@click.group()
def cli():
    """
    mdsl database command line utilities. 
    """ 
    pass

@cli.command("rawquery")
@click.argument('querystring')
def rawquery(querystring):
    connection = mdsldb_connect()
    table = print_raw_query_to_table(connection, querystring)
    print(table)

@cli.command("executequery")
@click.argument('querystring')
def executequery(querystring):
    """
    Execute an arbitrary SQL query. Can create, modify and delete records.
    """ 
    connection = mdsldb_connect()
    execute_query(connection, querystring)
    return None

@cli.command("jobsum")
@click.option('-t', '--tag', default=None, help="filter tags using this regex string")
@click.option('-v', '--verbose', is_flag=True, default=False)
@click.option('-o', '--order', default=None, help="sort by this column name")
@click.option('-f', '-i', '--itemname', default=None, help="filter by item name")
@click.option('-c', '--client', default=None, help="filter by client name")
def jobSum(tag, verbose, order, itemname, client):
    """ New Job Summary command """
    connection = mdsldb_connect()
    orderstring = ''
    if order: #sort by the field name defined by variable order
        orderstring = "ORDER BY "+ order
    if itemname: 
        query = 'SELECT * FROM "Job Summary" WHERE itemname RLIKE \'{}\''.format(itemname)
    elif client:
        query = 'SELECT * FROM "Job Summary" WHERE clientname RLIKE \'{}\''.format(client)
    elif tag:
        query = "SELECT * FROM \"Job Summary\" WHERE tags RLIKE \'" + tag + "\'" + orderstring + ";"
    else:
        query = "SELECT * FROM \"Job Summary\"" + orderstring + ";"
    output = read_query(connection, query)
    columns = read_query(connection, "DESCRIBE \"Job Summary\";")
    table_obj = dbtable.DB_jobsum_table.fromDB(columns, output)
    options = {'verbose': verbose, 'tag': tag, 'order': order}
    table_obj.printTable(options)


@cli.command("tasksum")
@click.option('-t', '--tag', default=None, help="filter tags using this regex string")
@click.option('-i', '--taskid', default='%', help="filter taskids")
@click.option('-v', '-f', '--verbose', is_flag=True, default=False)
@click.option('-o', '--order', default=None, help="sort by this column name")
def taskSum(tag, verbose, taskid, order):
    """
    quick summary of all active tasks
    """
    cellstyles = {
            'task_description':Style(color=rgb(130,150,210), bold=True),
            'job_ID':Style(color=rgb(130,190,210), bold=True),
            'task_ID':Style(color=rgb(200,160,150), bold=True),
            'clientname':Style(color=rgb(150,200,100),bold=True),
            'itemname':Style(color=rgb(120,80,200), bold=True),
            'tags':Style(color=rgb(120,180,100), bold=True),
            'who':Style(color=rgb(150,100,120), bold=True),
            'location':Style(color=rgb(80,100,120), bold=True),
            'priority':Style(color=rgb(50,200,100), bold=True),
            }
    connection = mdsldb_connect()
    console = Console()
    orderstring = ''
    if order: #sort by the field name defined by variable order
        orderstring = "ORDER BY "+ order
    if tag: 
        query = "SELECT * FROM \"Task Summary\" WHERE tags RLIKE \'" \
            + tag + "\' " + "AND " \
            + "task_ID LIKE \'" + taskid + "\' " \
            + orderstring
    else: 
        query = "SELECT * FROM \"Task Summary\" WHERE "\
            + "task_ID LIKE \'" + taskid + "\' " \
            + orderstring
    print(query)
    output = read_query(connection, query)
    columns = read_query(connection, "DESCRIBE \"Task Summary\";")
    overflow_string = 'fold'
    nowrap = not verbose

    table = Table(title='View: Task Summary',
            padding=(0,0),
            expand=True,
            row_styles=(Style(bgcolor=rgb(70,55,65)), Style(bgcolor=rgb(60,45,60)))
            )
    for item in columns:
        columntitle = item[0]
        try:
            style = cellstyles[columntitle]
        except:
            style = "blue"
        if columntitle == 'task_ID':
            table.add_column(columntitle, overflow=overflow_string, 
                    no_wrap=nowrap, width=3, style=style)
        elif columntitle == 'task_description':
            table.add_column(columntitle, overflow=overflow_string, 
                    no_wrap=nowrap, ratio=0.24, style=style)
        elif columntitle == 'job_ID':
            table.add_column(columntitle, overflow=overflow_string, 
                    no_wrap=nowrap, width=2, style=style)
        elif columntitle == 'priority':
            table.add_column(columntitle, overflow='crop', 
                    no_wrap=nowrap, width=2, style=style)
        elif columntitle == 'clientname':
            table.add_column(columntitle, overflow=overflow_string, 
                    no_wrap=nowrap, width=7, style=style)
        elif columntitle == 'itemname':
            table.add_column(columntitle, overflow=overflow_string, 
                    no_wrap=nowrap, width=10, style=style)
        else:
            table.add_column(columntitle, overflow=overflow_string, no_wrap=nowrap, width=None, style=style)

    for record in output:
        recordstring = []
        for item in record:
            recordstring.append(str(item))
        table.add_row(*recordstring)
    #print(output)
    #print(columns)
    console.print(table)

@cli.command('listclients')
@click.option('-n', '--sortbyname', is_flag=True, help="sort by name")
@click.option('-d', '-i', '--sortbyid', is_flag=True, help="sort by id")
def listclients(sortbyname, sortbyid):
    """
    list all clients
    """
    connection = mdsldb_connect()
    #reconstruct task description
    task_string = ''
    #default query - order by name
    query = "SELECT * FROM clients ORDER BY name"

    if sortbyname: 
        query = "SELECT * FROM clients ORDER BY name"
    elif sortbyid:
        query = "SELECT * FROM clients ORDER BY client_ID"
    output = print_raw_query_to_table(connection, query)
    print(output)
        
@cli.command('addtask')
@click.argument('task_description', nargs=-1)
@click.option('-jname', '--jobitemname', default=None, help="Name of the job to attach this task to")
@click.option('-j', '--jobid', default=-1, help="Job ID of the job to attach this task to")
@click.option('-p', '--priority', default=50, help="priority level 0-100")
def addtask(task_description, jobitemname, jobid, priority):
    """
    add a new task
    """
    connection = mdsldb_connect()
    #reconstruct task description
    task_string = ''
    setnexttaskquery = None
    query = None
    for word in task_description:
        task_string += word
        task_string += ' '
    task_string = task_string.strip()

    if jobid == -1:
        job_obj = dbclasses.DB_job.byField('itemname', jobitemname, connection)
        if job_obj:
            # print(client_obj)
            jobid = job_obj['job_ID'][0]
        else:
            print("Cannot find a job with that name!")
            jobid = None

    taskdict = {
            'priority':priority,
            'task_description':task_string,
            'job_ID':jobid
            }
    task_obj = dbclasses.DB_task.fromDict(taskdict, connection)
    query = task_obj.generateCreateString()
    print(query)
    if jobid:
        setnexttaskquery = "CALL setnexttask({});".format(str(jobid))
    # print(job_obj, job_obj.generateCreateString())
    output = execute_query(connection, query)
    if setnexttaskquery:
        execute_query(connection, setnexttaskquery)

#---- ADD JOB ----
@cli.command('addjob')
@click.argument('itemname', nargs=-1)
@click.option('-d', '--description', default='', help="job description")
@click.option('-c', '--clientname', default=None, help="client name or id")
def addjob(itemname, description, clientname):
    """
    add a new job
    """
    connection = mdsldb_connect()
    #reconstruct itemname
    itemname_string = ''
    for word in itemname:
        itemname_string += word
        itemname_string += ' '
    itemname_string = itemname_string.strip()
    client_obj = dbclasses.DB_client.byField('name', clientname, connection)
    if client_obj:
        # print(client_obj)
        client_id = client_obj['client_ID'][0]
    else:
        print("Cannot find a client with that name!")
        return False
    jobdict = {
            'itemname':itemname_string,
            'description':description,
            'client_ID':client_id
            }
    job_obj = dbclasses.DB_job.fromDict(jobdict, connection)
    query = job_obj.generateCreateString()
    # print(job_obj, job_obj.generateCreateString())
    output = execute_query(connection, query)

#-------- ADD CLIENT ------
@cli.command('addclient')
@click.argument('clientname', nargs=-1)
@click.option('-c', '--contact', default='', help="contact number or email")
@click.option('-a', '--address', default='', help="address")
def addclient(clientname, contact, address):
    """
    add a new client
    """
    connection = mdsldb_connect()
    #reconstruct clientname
    clientname_string = ''
    for word in clientname:
        clientname_string += word
        clientname_string += ' '
    clientname_string = clientname_string.strip()

    query = "INSERT INTO clients (name, contact, address) VALUES ('{}', '{}', '{}');".format(clientname_string, contact, address)
    print(query)
    output = execute_query(connection, query)

#-------- ADD INCOME ------
@cli.command('addincome')
@click.argument('amount', nargs=1)
@click.option('-c', '--clientname', default='', help="client name")
@click.option('-d', '--date', default='today', help='date. Specifying "today" will generate a string for the current date. This is also the default behaviour.')
@click.option('-n', '--notes', default='', help='remarks')
def addincome(amount, clientname, date, notes):
    """
    add a new income entry
    """
    connection = mdsldb_connect()
    client_obj = dbclasses.DB_client.byField('name', clientname, connection)
    if date == 'today': #default to today's date
        date = datetime.date.today()
    if client_obj: 
        client_id = client_obj['client_ID'][0]
        print(client_id)
    else:
        print("Client not found!")
    

    query = "INSERT INTO income (Amount, Date, paid_by, notes) VALUES ('{}', '{}', '{}', '{}');".format(amount, date, client_id, notes)
    # print(query)
    output = execute_query(connection, query)

#----- TASK GROUP  ----------
@cli.group('task', invoke_without_command=True)
@click.argument('taskid', default=None)
@click.pass_context
def task(context, taskid):
    """
    address, inspect or modify a single task
    """
    #pass taskid to subcommands through the context.obj dict.
    if context.invoked_subcommand == None:
        connection = mdsldb_connect()
        task_obj = dbclasses.DB_task.byID(taskid, connection)
        if task_obj:
            task_obj.printToTable()
    else:
        context.obj = {}
        context.obj['taskid'] = taskid

@task.command('delete')
@click.pass_context
def delete(context):
    """ remove task from database """ 
    connection = mdsldb_connect()
    taskid = context.obj['taskid']
    task_obj = dbclasses.DB_task.byID(taskid, connection)
    task_obj.delete_task(connection)

@task.command('done')
@click.pass_context
def done(context):
    """ mark task as completed """
    connection = mdsldb_connect()
    taskid = context.obj['taskid']
    task_obj = dbclasses.DB_task.byID(taskid, connection)
    task_obj.taskdone(connection)

@task.command('mod')
@click.pass_context
@click.argument('argstring', nargs=-1)
# @click.option('-c', '--col', default='')
def mod(context, argstring):
    """ modify task fields - syntax: st task <task_ID> mod <field> = <value>  """
    connection = mdsldb_connect()
    taskid = context.obj['taskid']
    print(taskid)
    task_obj = dbclasses.DB_task.byID(taskid, connection)

    #reconstruct arg string
    if len(argstring) == 0:
        ctx = click.get_current_context()
        click.echo(ctx.get_help())
        return None
    mod_string = ''
    for word in argstring:
        mod_string += word
        mod_string += ' '
    colname, val = mod_string.split('=')
    colname = colname.strip()
    val = val.strip()
    print(colname, val)

    # update the task object with new values
    try:
        task_obj[colname] = (val, task_obj[colname][1])
    except KeyError:
        print('No such field in this task.')
    else: # if no errors
        querystring = task_obj.generateUpdateString()
        print(querystring)
        confirm = input('Execute query {} ?\n(Y/n)'.format(querystring)) 

        if confirm.lower() == 'y' or confirm.lower() == 'yes':
            print('Executing.')
            output = execute_query(connection, querystring)
            print(output)



# --- JOB GROUP ---
@cli.group('job', invoke_without_command=True)
@click.argument('jobid', default=None)
@click.pass_context
def job(context, jobid):
    """
    address, inspect or modify a single job
    """
    #pass jobid to subcommands through the context.obj dict.
    if context.invoked_subcommand == None:
        connection = mdsldb_connect()
        query = "SELECT * from jobs WHERE job_ID LIKE {} LIMIT 1;".format(jobid)
        table = print_raw_query_to_table(connection, query)
        print(table)
        taskquery = "SELECT * from tasks WHERE job_ID LIKE {} AND COMPLETED = 0".format(jobid)
        tasktable = print_raw_query_to_table(connection, taskquery)
        print(tasktable)
    else:
        context.obj = {}
        context.obj['jobid'] = jobid

@job.command('delete')
@click.pass_context
def delete(context):
    connection = mdsldb_connect()
    jobid = context.obj['jobid']
    taskquery = "DELETE from tasks WHERE job_ID LIKE "+ jobid + " ;"
    query = "DELETE from jobs WHERE job_ID LIKE "+ jobid + " LIMIT 1;"
    taskoutput = execute_query(connection, taskquery)
    output = execute_query(connection, query)
    print(taskoutput, output)

@job.command('done')
@click.pass_context
def done(context):
    connection = mdsldb_connect()
    jobid = context.obj['jobid']
    #query = "UPDATE tasks SET completed = 1 WHERE task_ID LIKE "+ taskid + " LIMIT 1;"
    query = "CALL jobdone("+ jobid + ");"
    output = execute_query(connection, query)
    print(output)

@job.command('mod')
@click.pass_context
@click.argument('argstring', nargs=-1)
# @click.option('-c', '--col', default='')
def mod(context, argstring):
    """ modify job fields. Syntax: st job <job_ID> mod <field> = <value>  """
    connection = mdsldb_connect()
    jobid = context.obj['jobid']
    job_obj = dbclasses.DB_job.byID(jobid, connection)

    #reconstruct arg string
    mod_string = ''
    for word in argstring:
        mod_string += word
        mod_string += ' '
    colname, val = mod_string.split('=')
    colname = colname.strip()
    val = val.strip()
    print(colname, val)

    # update the task object with new values
    try:
        job_obj[colname] = (val, job_obj[colname][1])
    except KeyError:
        print('No such field in this task.')
    else: # if no errors
        querystring = job_obj.generateUpdateString()
        print(querystring)
        confirm = input('Execute query {} ?\n(Y/n)'.format(querystring)) 

        if confirm.lower() == 'y' or confirm.lower() == 'yes':
            print('Executing.')
            output = execute_query(connection, querystring)
            print(output)

# --- INCOME SUMMARY

@cli.command('incomesummary')
@click.option('-v', '--verbose', is_flag=True, default=False)
@click.option('-o', '--order', default=None, help="sort by this column name")
@click.option('-c', '--client', default=None, help="filter by client name")
def incomesummary(verbose, order, client):
    connection = mdsldb_connect()
    order = False
    if not order:
        order = 'date'
    query = "SELECT * from income ORDER BY {}".format(order)
    output = read_query(connection, query)
    columns = read_query(connection, "DESCRIBE income;")
    file = open('/home/ada/incomesummary_sl.txt', 'w')
    file.write(str(output))
    file.close()
    table_obj = dbtable.DB_incomesum_table.fromDB(columns, output)
    options = {'verbose': verbose}
    # options = {}
    table_obj.printTable(options)




# --- INCOME GROUP ---
@cli.group('income', invoke_without_command=True)
@click.argument('transactionid', default=None)
@click.pass_context
# @click.option('-o', '--order', default=None, help="sort by this column name")
# @click.option('-c', '--client', default=None, help="filter by client name")
def income(context, transactionid):
    """
    address, inspect or modify a single job
    """
    #pass transactionid to subcommands through the context.obj dict.
    if context.invoked_subcommand == None:
        connection = mdsldb_connect()
        query = "SELECT * from income WHERE Transaction_ID LIKE {} LIMIT 1;".format(transactionid)
        table = print_raw_query_to_table(connection, query)
        print(table)
    else:
        context.obj = {}
        context.obj['transactionid'] = transactionid


@income.command('delete')
@click.pass_context
def delete(context):
    connection = mdsldb_connect()
    transactionid = context.obj['transactionid']
    query = "DELETE from income WHERE Transaction_ID LIKE "+ transactionid + " LIMIT 1;"
    output = execute_query(connection, query)
    print(output)

@income.command('mod')
@click.pass_context
@click.argument('argstring', nargs=-1)
# @click.option('-c', '--col', default='')
def mod(context, argstring):
    """ modify job fields. Syntax: st job <job_ID> mod <field> = <value>  """
    connection = mdsldb_connect()
    transactionid = context.obj['transactionid']
    income_obj = dbclasses.DB_income.byID(transactionid, connection)

    #reconstruct arg string
    mod_string = ''
    for word in argstring:
        mod_string += word
        mod_string += ' '
    colname, val = mod_string.split('=')
    colname = colname.strip()
    val = val.strip()
    print(colname, val)

    # update the task object with new values
    try:
        income_obj[colname] = (val, income_obj[colname][1])
    except KeyError:
        print('No such field in this task.')
    else: # if no errors
        querystring = income_obj.generateUpdateString()
        print(querystring)
        confirm = input('Execute query {} ?\n(Y/n)'.format(querystring)) 

        if confirm.lower() == 'y' or confirm.lower() == 'yes':
            print('Executing.')
            output = execute_query(connection, querystring)
            print(output)

# --- TEST LOCAL OBJECTS GROUP ---
@cli.command('importtask')
@click.argument('taskid')
def importtask(taskid):
    """ import taskid TEST FUNC """
    connection = mdsldb_connect()
    task_obj = dbclasses.DB_task.byID(taskid, connection)
    print(task_obj, task_obj.generateUpdateString())

if __name__ == '__main__':
    cli()
#execute_query(connection, "USE soundlabs_work;");

