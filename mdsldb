#!/usr/bin/python3

import mysql.connector, click, os
from rich import print
from rich.table import Table
from rich.console import Console
from rich.style import Style
from rich.color import Color
from mysql.connector import Error
import re
import dbclasses
from dbclasses import read_query, execute_query, print_raw_query_to_table
from dotenv import load_dotenv, dotenv_values


# Load environment and initialize airtable interface
# load_dotenv()
load_dotenv()
password = os.environ['PASSWORD']
username = os.environ['USERNAME']

def create_server_connection(host_name, user_name, db, user_password):
    connection = None
    try:
        connection = mysql.connector.connect(
                host=host_name,
                user=user_name,
                port=3307,
                database=db,
                passwd=user_password
                )
        print("~connected~")
    except Error as err:
        print(f"Error: '{err}'")

    return connection

def mdsldb_connect():
    connection = create_server_connection("localhost", username, "soundlabs_work", password)
    return connection

def rgb(r, g, b):
    color = Color.from_rgb(r, g, b)
    return color


@click.group()
def cli():
    """
    mdsl database command line utilities. 
    """ 
    pass

@cli.command("rawquery")
@click.argument('querystring')
def rawquery(querystring):
    connection = mdsldb_connect()
    table = print_raw_query_to_table(connection, querystring)
    print(table)

@cli.command("executequery")
@click.argument('querystring')
def executequery(querystring):
    """
    Execute an arbitrary SQL query. Can create, modify and delete records.
    """ 
    connection = mdsldb_connect()
    execute_query(connection, querystring)
    return None

@cli.command("jobsum")
@click.option('-t', '--tag', default=None, help="filter tags using this regex string")
@click.option('-v', '-f', '--verbose', is_flag=True, default=False)
@click.option('-o', '--order', default=None, help="sort by this column name")
def jobSum(tag, verbose, order):
    """
    quick summary of all active jobs
    """
    cellstyles = {
            'description':Style(color=rgb(185,110,100), bold=True),
            'task_description':Style(color=rgb(130,150,210), bold=True),
            'jID':Style(color=rgb(130,190,210), bold=True),
            'clientname':Style(color=rgb(150,200,100),bold=True),
            'itemname':Style(color=rgb(120,80,200), bold=True),
            'tags':Style(color=rgb(120,180,100), bold=True),
            'completed':Style(color=rgb(50,200,100), bold=True),
            'next_task':Style(color=rgb(200,160,150), bold=True)
            }
    connection = connection = mdsldb_connect()
    console = Console()
    orderstring = ''
    if order: #sort by the field name defined by variable order
        orderstring = "ORDER BY "+ order
    if tag:
        query = "SELECT * FROM \"Job Summary\" WHERE tags RLIKE \'" + tag + "\'" + orderstring + ";"
    else:
        query = "SELECT * FROM \"Job Summary\"" + orderstring + ";"
    output = read_query(connection, query)
    columns = read_query(connection, "DESCRIBE \"Job Summary\";")
    overflow_string = 'fold'
    nowrap = not verbose

    table = Table(title='View: Job Summary',
            padding=(0,0),
            expand=True,
            row_styles=(Style(bgcolor=rgb(70,55,65)), Style(bgcolor=rgb(60,45,60)))
            )
    for item in columns:
        columntitle = item[0]
        try:
            style = cellstyles[columntitle]
        except:
            style = "blue"
        if columntitle == 'description':
            table.add_column(columntitle, overflow=overflow_string, 
                    no_wrap=nowrap, ratio=0.16, style=style)
        elif columntitle == 'completed':
            table.add_column(columntitle, overflow='crop', 
                    no_wrap=nowrap, width=2, style=style)
        elif columntitle == 'task_description':
            table.add_column(columntitle, overflow=overflow_string, 
                    no_wrap=nowrap, ratio=0.24, style=style)
        elif columntitle == 'job_ID':
            table.add_column(columntitle, overflow=overflow_string, 
                    no_wrap=nowrap, width=2, style=style)
        elif columntitle == 'next_task':
            table.add_column(columntitle, overflow='crop', 
                    no_wrap=nowrap, width=2, style=style)
        elif columntitle == 'clientname':
            table.add_column(columntitle, overflow=overflow_string, 
                    no_wrap=nowrap, width=7, style=style)
        elif columntitle == 'itemname':
            table.add_column(columntitle, overflow=overflow_string, 
                    no_wrap=nowrap, width=10, style=style)
        else:
            table.add_column(columntitle, overflow=overflow_string, no_wrap=nowrap, width=None, style=style)

    for record in output:
        recordstring = []
        for item in record:
            recordstring.append(str(item))
        table.add_row(*recordstring)
    #print(output)
    #print(columns)
    console.print(table)

@cli.command("tasksum")
@click.option('-t', '--tag', default=None, help="filter tags using this regex string")
@click.option('-i', '--taskid', default='%', help="filter taskids")
@click.option('-v', '-f', '--verbose', is_flag=True, default=False)
@click.option('-o', '--order', default=None, help="sort by this column name")
def taskSum(tag, verbose, taskid, order):
    """
    quick summary of all active tasks
    """
    cellstyles = {
            'task_description':Style(color=rgb(130,150,210), bold=True),
            'job_ID':Style(color=rgb(130,190,210), bold=True),
            'task_ID':Style(color=rgb(200,160,150), bold=True),
            'clientname':Style(color=rgb(150,200,100),bold=True),
            'itemname':Style(color=rgb(120,80,200), bold=True),
            'tags':Style(color=rgb(120,180,100), bold=True),
            'who':Style(color=rgb(150,100,120), bold=True),
            'location':Style(color=rgb(80,100,120), bold=True),
            'priority':Style(color=rgb(50,200,100), bold=True),
            }
    connection = mdsldb_connect()
    console = Console()
    orderstring = ''
    if order: #sort by the field name defined by variable order
        orderstring = "ORDER BY "+ order
    if tag: 
        query = "SELECT * FROM \"Task Summary\" WHERE tags RLIKE \'" \
            + tag + "\' " + "AND " \
            + "task_ID LIKE \'" + taskid + "\' " \
            + orderstring
    else: 
        query = "SELECT * FROM \"Task Summary\" WHERE "\
            + "task_ID LIKE \'" + taskid + "\' " \
            + orderstring
    print(query)
    output = read_query(connection, query)
    columns = read_query(connection, "DESCRIBE \"Task Summary\";")
    overflow_string = 'fold'
    nowrap = not verbose

    table = Table(title='View: Task Summary',
            padding=(0,0),
            expand=True,
            row_styles=(Style(bgcolor=rgb(70,55,65)), Style(bgcolor=rgb(60,45,60)))
            )
    for item in columns:
        columntitle = item[0]
        try:
            style = cellstyles[columntitle]
        except:
            style = "blue"
        if columntitle == 'task_ID':
            table.add_column(columntitle, overflow=overflow_string, 
                    no_wrap=nowrap, width=2, style=style)
        elif columntitle == 'task_description':
            table.add_column(columntitle, overflow=overflow_string, 
                    no_wrap=nowrap, ratio=0.24, style=style)
        elif columntitle == 'job_ID':
            table.add_column(columntitle, overflow=overflow_string, 
                    no_wrap=nowrap, width=2, style=style)
        elif columntitle == 'priority':
            table.add_column(columntitle, overflow='crop', 
                    no_wrap=nowrap, width=2, style=style)
        elif columntitle == 'clientname':
            table.add_column(columntitle, overflow=overflow_string, 
                    no_wrap=nowrap, width=7, style=style)
        elif columntitle == 'itemname':
            table.add_column(columntitle, overflow=overflow_string, 
                    no_wrap=nowrap, width=10, style=style)
        else:
            table.add_column(columntitle, overflow=overflow_string, no_wrap=nowrap, width=None, style=style)

    for record in output:
        recordstring = []
        for item in record:
            recordstring.append(str(item))
        table.add_row(*recordstring)
    #print(output)
    #print(columns)
    console.print(table)
        
@cli.command('addtask')
@click.argument('task_description', nargs=-1)
@click.option('-j', '--job', default=None, help="Name of the job to attach this task to")
@click.option('-p', '--priority', default=50, help="priority level 0-100")
def addtask(task_description, job, priority):
    """
    add a new task
    """
    connection = mdsldb_connect()
    #reconstruct task description
    task_string = ''
    setnexttaskquery = None
    query = None
    for word in task_description:
        task_string += word
        task_string += ' '
    task_string = task_string.strip()

    if job:
        jobIDquery = "SELECT job_ID from jobs_active WHERE itemname RLIKE \'" + job + "\' LIMIT 1"
        try:
            jobid = read_query(connection, jobIDquery)[0][0]
        except IndexError:
            print("Sorry, no matching job found!")
            jobid = None
            return None #EXIT FUNCTION
        if jobid:
            query = "INSERT INTO tasks (task_description, job_ID, priority) VALUES (\'" + task_string + "\'," + str(jobid) + "," + str(priority) + ");"
            setnexttaskquery = "CALL setnexttask(" + str(jobid) + ");"
    else: #no job specified! just add the task without a job id
        query = "INSERT INTO tasks (task_description) VALUES (\'" + task_string + "\');"

    print(query)
    output = execute_query(connection, query)
    if setnexttaskquery:
        execute_query(connection, setnexttaskquery)

#---- ADD JOB ----
@cli.command('addjob')
@click.argument('itemname', nargs=-1)
@click.option('-d', '--description', default='', help="job description")
@click.option('-c', '--client', default=None, help="client name or id")
def addjob(itemname, description, client):
    """
    add a new job
    """
    connection = mdsldb_connect()
    #reconstruct itemname
    itemname_string = ''
    for word in itemname:
        itemname_string += word
        itemname_string += ' '
    itemname_string = itemname_string.strip()

    if client:
        clientIDquery = "SELECT client_ID from clients WHERE name RLIKE \'" + client + "\' LIMIT 1"
        try:
            clientid = read_query(connection, clientIDquery)[0][0]
        except IndexError:
            print("Sorry, no matching client found!")
            clientid = None
            return None #EXIT FUNCTION
        if clientid:
            query = "INSERT INTO jobs (itemname, client_ID, description) VALUES (\'" + itemname_string + "\'," + str(clientid) + ",\'" + description + "\');"
    else: #no client specified! just add the task without a client id
        query = "INSERT INTO tasks (itemname, description) VALUES (\'" + itemname_string + "\', " + description +");"

    print(query)
    output = execute_query(connection, query)

#----- TASK GROUP  ----------
@cli.group('task', invoke_without_command=True)
@click.argument('taskid', default=None)
@click.pass_context
def task(context, taskid):
    """
    address, inspect or modify a single task
    """
    #pass taskid to subcommands through the context.obj dict.
    if context.invoked_subcommand == None:
        connection = mdsldb_connect()
        table = Table(title='task' + str(taskid),
                padding=(0,0),
                expand=True,
                row_styles=(Style(bgcolor=rgb(70,55,65)), Style(bgcolor=rgb(60,45,60)))
                )
        query = "SELECT * from tasks WHERE task_ID LIKE "+ taskid + " LIMIT 1;"
        columns = read_query(connection, "DESCRIBE tasks;")
        for item in columns:
            columntitle = item[0]
            table.add_column(columntitle, overflow='fold', width=None)
        taskrecord = read_query(connection, query)
        if len(taskrecord) > 0:
            table.add_row(*(str(x) for x in taskrecord[0]))
            print(table)
        else: 
            print("No task with that ID found.")
    else:
        context.obj = {}
        context.obj['taskid'] = taskid

@task.command('delete')
@click.pass_context
def delete(context):
    connection = mdsldb_connect()
    taskid = context.obj['taskid']
    query = "DELETE from tasks WHERE task_ID LIKE "+ taskid + " LIMIT 1;"
    output = execute_query(connection, query)
    print(output)

@task.command('done')
@click.pass_context
def done(context):
    connection = mdsldb_connect()
    taskid = context.obj['taskid']
    #query = "UPDATE tasks SET completed = 1 WHERE task_ID LIKE "+ taskid + " LIMIT 1;"
    query = "CALL taskdone("+ taskid + ");"
    output = execute_query(connection, query)
    print(output)

@task.command('modtask')
@click.pass_context
@click.argument('argstring', nargs=-1)
# @click.option('-c', '--col', default='')
def modtask(context, argstring):
    """ import taskid TEST FUNC """
    connection = mdsldb_connect()
    taskid = context.obj['taskid']
    task_obj = dbclasses.DB_task.byID(taskid, connection)

    #reconstruct arg string
    mod_string = ''
    for word in argstring:
        mod_string += word
        mod_string += ' '
    colname, val = mod_string.split('=')
    colname = colname.strip()
    val = val.strip()
    print(colname, val)

    # update the task object with new values
    try:
        task_obj[colname] = (val, task_obj[colname][1])
    except KeyError:
        print('No such field in this task.')
    else: # if no errors
        querystring = task_obj.generateUpdateString()
        print(querystring)
        confirm = input('Execute query {} ?\n(Y/n)'.format(querystring)) 

        if confirm.lower() == 'y' or confirm.lower() == 'yes':
            print('Executing.')
            output = execute_query(connection, querystring)
            print(output)


    # print(task_obj, task_obj.id, task_obj.generateUpdateString())

# --- JOB GROUP ---
@cli.group('job', invoke_without_command=True)
@click.argument('jobid', default=None)
@click.pass_context
def job(context, jobid):
    """
    address, inspect or modify a single job
    """
    #pass jobid to subcommands through the context.obj dict.
    if context.invoked_subcommand == None:
        connection = mdsldb_connect()
        query = "SELECT * from jobs WHERE job_ID LIKE "+ jobid + " LIMIT 1;"
        table = print_raw_query_to_table(connection, query)
        print(table)
    else:
        context.obj = {}
        context.obj['jobid'] = jobid

@job.command('delete')
@click.pass_context
def delete(context):
    connection = mdsldb_connect()
    jobid = context.obj['jobid']
    query = "DELETE from jobs WHERE job_ID LIKE "+ jobid + " LIMIT 1;"
    output = execute_query(connection, query)
    print(output)

@job.command('done')
@click.pass_context
def done(context):
    connection = mdsldb_connect()
    jobid = context.obj['jobid']
    #query = "UPDATE tasks SET completed = 1 WHERE task_ID LIKE "+ taskid + " LIMIT 1;"
    query = "CALL jobdone("+ jobid + ");"
    output = execute_query(connection, query)
    print(output)

# --- TEST LOCAL OBJECTS GROUP ---
@cli.command('importtask')
@click.argument('taskid')
def importtask(taskid):
    """ import taskid TEST FUNC """
    connection = mdsldb_connect()
    task_obj = dbclasses.DB_task.byID(taskid, connection)
    print(task_obj, task_obj.generateUpdateString())

if __name__ == '__main__':
    cli()
#execute_query(connection, "USE soundlabs_work;");

